from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
import pickle
import os.path
import datetime
from dateutil.parser import parse
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import os

# Variables de entorno para configuración SMTP
smtp_server = os.getenv('SMTP_SERVER', 'smtp.example.com')
smtp_port = int(os.getenv('SMTP_PORT', 465))
smtp_username = os.getenv('SMTP_USERNAME', 'your_email@example.com')
smtp_password = os.getenv('SMTP_PASSWORD', 'your_password')
sender_email = smtp_username

# Diccionario de ubicaciones con correos electrónicos 
ubicaciones = {
    "UBICACION_1": {"nombre": "Nombre Persona 1", "correo": os.getenv('CORREO_UBICACION_1', 'correo1@example.com')},
    "UBICACION_2": {"nombre": "Nombre Persona 2", "correo": os.getenv('CORREO_UBICACION_2', 'correo2@example.com')},
    "UBICACION_3": {"nombre": "Nombre Persona 3", "correo": os.getenv('CORREO_UBICACION_3', 'correo3@example.com')}
}

# Inicialización de la API de Google Calendar
SCOPES = ['https://www.googleapis.com/auth/calendar.readonly']

def send_email(recipient_email, subject, body):
    """Función para enviar un correo electrónico."""
    message = MIMEMultipart()
    message['From'] = sender_email
    message['To'] = recipient_email
    message['Subject'] = subject
    message.attach(MIMEText(body, 'plain'))
    
    server = smtplib.SMTP_SSL(smtp_server, smtp_port)
    server.login(smtp_username, smtp_password)
    text = message.as_string()
    server.sendmail(sender_email, recipient_email, text)
    server.quit()

def main():
    """Función principal del script."""
    creds = None
    if os.path.exists('token.pickle'):
        with open('token.pickle', 'rb') as token:
            creds = pickle.load(token)
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                'credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        with open('token.pickle', 'wb') as token:
            pickle.dump(creds, token)

    service = build('calendar', 'v3', credentials=creds)

    start_of_2024 = datetime.datetime(year=2024, month=1, day=1).isoformat() + 'Z'
    end_of_2024 = datetime.datetime(year=2024, month=12, day=31, hour=23, minute=59, second=59).isoformat() + 'Z'
    
    events_by_location = {}
    page_token = None
    while True:
        events_result = service.events().list(
            calendarId='primary',
            timeMin=start_of_2024,
            timeMax=end_of_2024,
            singleEvents=True,
            orderBy='startTime',
            pageToken=page_token
        ).execute()
        
        events = events_result.get('items', [])
        for event in events:
            if 'summary' in event and 'vacaciones' in event['summary'].lower():
                start = event['start'].get('dateTime', event['start'].get('date'))
                end = event['end'].get('dateTime', event['end'].get('date'))
                location = event.get('location', 'Ubicación no especificada')
                if start and end:
                    start_date = parse(start)
                    end_date = parse(end)
                    day_difference = (end_date - start_date).days + 1
                    
                    if location not in events_by_location:
                        events_by_location[location] = []
                    events_by_location[location].append({
                        'summary': event['summary'],
                        'start_date': start_date,
                        'end_date': end_date,
                        'duration': day_difference
                    })
        
        page_token = events_result.get('nextPageToken')
        if not page_token:
            break

    for location, events in events_by_location.items():
        total_duration = sum(event['duration'] for event in events)
        print(f"Ubicación: {location} - Total días: {total_duration}")
        body = "En el presente documento encontrarás los periodos de vacaciones. Por favor confirma que sean correctos reenviando el correo e indicándolo en caso de que haya algún error espera a corregirlo. A continuación, los detalles de tus vacaciones:\n\n"
        
        for event in events:
            event_details = f"- {event['start_date'].strftime('%d/%m/%Y')} a {event['end_date'].strftime('%d/%m/%Y')}: {event['summary']} (Duración: {event['duration']} días)\n"
            print(event_details)
            body += event_details

        if location in ubicaciones:
            recipient_info = ubicaciones[location]
            send_email(recipient_info["correo"], "Confirmación de Vacaciones 2024", body)
            print(f"Correo enviado a {recipient_info['correo']}")

        print("\n")  # Espacio entre ubicaciones

if __name__ == '__main__':
    main()
